/****************************************************************************************
 * Archivo: utils.gs
 * Descripci√≥n:
 *   Utilidades de construcci√≥n de HTML, plantillas de email y helpers para triggers.
 ****************************************************************************************/

/** ============================== HTML: PLANTILLAS ================================== **/

/**
 * Espacio de nombres para construir HTML (p√°gina de instrucciones).
 */
const Templates = {
  /**
   * Genera la p√°gina HTML de instrucciones con un bot√≥n que abre la app principal.
   * @param {{pageTitle: string, primaryButtonText: string, appUrl: string}} params
   * @returns {string} - HTML listo para renderizar via HtmlService.
   */
  buildInstructionHtml: (params) => {
    // Sanitiza entradas m√≠nimamente (escapado simple de atributos/innerText).
    const safe = (s) => String(s || '').replace(/[<>&"]/g, (c) => ({
      '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;'
    }[c]));
    const pageTitle = safe(params.pageTitle);
    const buttonText = safe(params.primaryButtonText);
    const appUrl = String(params.appUrl || '').trim(); // URL final (puede incluir rowId codificado)

    // HTML completo (mismo look & feel que el original, con mejoras menores de accesibilidad).
    return `<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="Content-Security-Policy" content="default-src 'self' https: data:; img-src * data:; media-src *; style-src 'unsafe-inline' https:; script-src 'unsafe-inline' https:;">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${pageTitle}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      line-height: 1.6;
      color: #333;
      background-color: #ffffff;
    }
    .instruction-container { margin: 20px 0; }
    .instruction-item {
      margin-bottom: 30px;
      padding: 20px;
      background-color: #f9f9f9;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .instruction-item img, .instruction-item video {
      max-width: 100%;
      height: auto;
      border-radius: 4px;
      margin: 10px auto;
      display: block;
    }
    h1 {
      color: #2c3e50;
      text-align: center;
      margin-bottom: 30px;
    }
    h2 { color: #34495e; margin-top: 0; }
    .step-number {
      display: inline-block;
      width: 30px;
      height: 30px;
      background-color: #3498db;
      color: white;
      border-radius: 50%;
      text-align: center;
      line-height: 30px;
      margin-right: 10px;
      font-weight: bold;
    }
    .btn {
      display: block;
      width: 220px;
      background-color: #3498db;
      color: white;
      text-align: center;
      padding: 12px;
      margin: 30px auto;
      text-decoration: none;
      border-radius: 4px;
      font-weight: bold;
      transition: background-color 0.3s;
      border: 0;
      cursor: pointer;
    }
    .btn:hover { background-color: #2980b9; }
    .sr-only {
      position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px;
      overflow: hidden; clip: rect(0,0,0,0); border: 0;
    }
  </style>
</head>
<body>
  <h1>${pageTitle}</h1>

  <div class="instruction-container" role="list">
    <section class="instruction-item" role="listitem" aria-labelledby="inst-1-title">
      <h2 id="inst-1-title"><span class="step-number" aria-hidden="true">1</span> Instrucci√≥n Inicial</h2>
      <p>Bienvenido al test. Por favor, lea atentamente todas las instrucciones antes de comenzar.</p>
      <img src="https://investigar-webapp.web.app/assets/videos/instructionRulit_1.gif" alt="Animaci√≥n de ejemplo del patr√≥n a seguir">
      <p>Observe atentamente la animaci√≥n que muestra el patr√≥n a seguir durante el test.</p>
    </section>

    <section class="instruction-item" role="listitem" aria-labelledby="inst-2-title">
      <h2 id="inst-2-title"><span class="step-number" aria-hidden="true">2</span> Secuencia L√≥gica</h2>
      <img src="https://investigar-webapp.web.app/assets/images/instructionRulit_2.png" alt="Imagen con secuencia l√≥gica a identificar">
      <p>Identifique la secuencia l√≥gica mostrada en la imagen. Este ser√° el tipo de patrones que deber√° completar.</p>
    </section>

    <section class="instruction-item" role="listitem" aria-labelledby="inst-3-title">
      <h2 id="inst-3-title"><span class="step-number" aria-hidden="true">3</span> Selecci√≥n de Respuesta</h2>
      <img src="https://investigar-webapp.web.app/assets/images/instruction_4.png" alt="Opciones de respuesta para completar el patr√≥n">
      <p>Para cada pregunta, seleccione la opci√≥n que mejor complete el patr√≥n mostrado.</p>
      <ul>
        <li>Analice cuidadosamente cada opci√≥n</li>
        <li>Elija solo una respuesta</li>
        <li>Tendr√° un tiempo limitado para cada pregunta</li>
      </ul>
    </section>
  </div>

  <button id="startTestBtn" class="btn" type="button" aria-describedby="btn-desc">
    ${buttonText}
  </button>
  <p id="btn-desc" class="sr-only">Se abrir√° la aplicaci√≥n del test en una nueva pesta√±a del navegador.</p>

  <script>
    // Abrir en nueva pesta√±a la app principal con el rowId (si estuvo disponible).
    document.getElementById('startTestBtn').addEventListener('click', function () {
      var url = ${JSON.stringify(appUrl)};
      window.open(url, '_blank', 'noopener');
    });
  </script>
</body>
</html>`;
  }
};

/** ============================== EMAIL: PLANTILLAS ================================= **/

/**
 * Plantillas de correo (HTML) para confirmar al respondente.
 */
const EmailTemplates = {
  /**
   * Construye el HTML del correo de confirmaci√≥n.
   * @param {{responseId: string, timestampStr: string, deepLink: string}} params
   * @returns {string}
   */
  buildConfirmationHtml: (params) => {
    // Escapado m√≠nimo de atributos/innerText.
    const safe = (s) => String(s || '').replace(/[<>&"]/g, (c) => ({
      '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;'
    }[c]));
    const responseId = safe(params.responseId);
    const timestampStr = safe(params.timestampStr);
    const deepLink = String(params.deepLink || '').trim();

    return `
<div style="font-family: Arial, sans-serif; max-width: 620px; margin: 0 auto;">
  <h2 style="color: #2c3e50; margin-bottom: 8px;">¬°Gracias por completar el formulario!</h2>
  <p style="margin-top: 0;">Hemos recibido tu respuesta correctamente.</p>
<!--
  <div style="background: #f8f9fa; padding: 16px; border-radius: 6px; margin: 20px 0; border-left: 4px solid #2c3e50;">
    <p style="margin: 0 0 6px;"><strong>ID de seguimiento:</strong> ${responseId}</p>
    <p style="margin: 0;"><strong>Fecha y hora:</strong> ${timestampStr}</p>
  </div> -->

  <div style="margin: 26px 0; text-align: center;">
    <a href="${deepLink}"
       style="background-color: #2c3e50; color: #ffffff; padding: 12px 24px; text-decoration: none; border-radius: 4px; font-weight: bold; display: inline-block;">
       Ir a la Aplicaci√≥n
    </a>
  </div>

  <p style="font-size: 12px; color: #666; margin-top: 24px;">
    Si el bot√≥n no funciona, copia y pega esta URL en tu navegador:<br>
    ${deepLink}
  </p>
</div>`;
  }
};

/** ============================== HELPERS: LINKS/EMAIL ============================== **/

/**
 * Construye el deep link al endpoint doGet agregando ?rowId=<ID>.
 * @param {string} responseId - ID de respuesta del Form.
 * @returns {string} - URL lista para abrir.
 */
function buildExecDeepLink(responseId) {
  const rid = encodeURIComponent(String(responseId || '').trim());
  return `${CFG_EXEC_URL_BASE}?rowId=${rid}`;
}

/**
 * Devuelve el email del respondente si el Form lo recopila autom√°ticamente.
 * @param {GoogleAppsScript.Events.FormsOnFormSubmit} e - Evento de env√≠o.
 * @returns {string|null}
 */
function safeGetRespondentEmail(e) {
  try {
    // getRespondentEmail funciona si el Form est√° configurado para recopilar direcciones
    const email = e.response && e.response.getRespondentEmail
      ? e.response.getRespondentEmail()
      : null;

    // Normaliza cadenas vac√≠as
    if (email && String(email).trim() !== '') {
      return String(email).trim();
    }
  } catch (err) {
    console.warn('No fue posible leer el email del respondente:', err);
  }
  return null;
}

/** ============================== HELPERS: TRIGGERS ================================= */

/**
 * Espacio de nombres para utilidades de triggers.
 */
const Triggers = {
  /**
   * Elimina TODOS los triggers del proyecto.
   * √ösalo con cautela.
   */
  deleteAll: () => {
    const triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(t => ScriptApp.deleteTrigger(t));
    console.log('üóëÔ∏è Todos los triggers del proyecto han sido eliminados.');
  },

  /**
   * Elimina triggers por nombre de funci√≥n (handler) para evitar duplicados.
   * @param {string} handlerName - Por ejemplo: 'onFormSubmit'
   */
  deleteByHandler: (handlerName) => {
    const triggers = ScriptApp.getProjectTriggers();
    const toDelete = triggers.filter(t => t.getHandlerFunction && t.getHandlerFunction() === handlerName);
    toDelete.forEach(t => ScriptApp.deleteTrigger(t));
    console.log(`üóëÔ∏è Triggers con handler "${handlerName}" eliminados: ${toDelete.length}`);
  }
};
